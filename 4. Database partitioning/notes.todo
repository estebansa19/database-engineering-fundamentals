Qué es?:

    - es dividir una tabla en instancias más pequeñas para que, de esta manera, no tengamos que
      trabajar con colleciones tan grandes de información en nuestras consultas. e.g: podemos tener
      una tabla con 1B de rows pero si la tenemos particionada, en una consulta trabajaríamos con
      200k de rows.

Vertical vs horizontal partitioning:

  - horizontal: cuando se hace la partición de acuerdo a rangos. e.g: registros de ids 1-1000 en
    una tabla, registros de ids 1001-2000 en otra.
  - vertical: hacer la partición de arriba hacia abajo, o sea, particionando a partid de columnas.
    e.g: si tenemos una columna demasiado pesada y que no usamos siempre, hacemos una vertical
    partition y esta información sólo será fetched si se consulta.

Partitioning types:

  - by ranges: dates, ids (e.g. created_at).
  - by list: discrete values (e.g country codes: CO, MX, USA).
  - by hash: hash functions.

Partitioning vs Sharding:

  - Horizontal Partitioning separa una gran tabla en tablas más pequeñas, en la misma DB.
    Además, la DB se encarga de todo el management de la tabla a la hora de consultarla.
  - Sharding separa una gran tabla en tablas más pequeñas pero en distintos servidores de DB. El
    cliente tiene que hacer el management de a qué shard va a conectarse. e.g. Si quisiéramos
    tener un database server de acuerdo a la locación del user.
  - con Sharding nuestra query se mantiene idéntica pero tenemos que manejar el cambio de
    servidores.

ACID:

  qué es una transaction?:
    - una colección de queries que se trata como una unidad de trabajo individual. 

    e.g: una tranferencia bancaria de una cuenta a otra (
        SELECT - para saber que tienen la cantidad de dinero necesaria
        UPDATE - remover dinero de cuenta z
        UPDATE - agregar dinero a cuenta x
      )

    - ciclo de vida de una transaction:

      * BEGIN para comenzar la transaction
      * COMMIT cuando estamos satisfechos con las queries y queremos persistirlas
      * ROLLBACK para deshacer los cambios
      * TRANSACTION UNEXPECTED ENDING cuando ocurre un error inesperado. e.g: un crasheo

      Cada motor de DB puede darle una prioridad diferente a cada parte del ciclo de vida de una
      transaction. e.g: Postgres le da más prioridad a que se le hagan commit a los cambios
      por lo que este motor está muy bien optimizado para esto.

    - naturaleza de las transactions

      * normalmente son para leer y actualizar información
      * podemos tener transactions sólo de lectura. e.g: la generación de un reporte, una read only
        transaction nos permite conservar la consistencia con respecto a concurrencia, nuevos 
        registros, etc.
      * la DB siempre que ejecutamos un cambio de igual manera genera una transaction. Cada vez que
        ejecutamos un INSERT en la DB, se crea una transaction y se ejecuta un COMMIT directamente.

  Atomicity:
    - una transaction debería tratarse como una unidad y no dividirse nunca, si una query falla por
      algún motivo, todas las anteriores deben hacer rollback.
    - si la DB crashea por algún motivo y estábamos en medio de una transaction que, por ejemplo,
      llevaba 100 queries ejecutadas de manera correcta, la transacction debe hacer rollback
      también.

    e.g: queremos hacer una transaction de una DB bancaria, debitar una cuenta y creditar a otra

    cuenta X tiene 1000
    cuenta Y tiene 500

    1. comenzamos la transaction
    2. debitamos a cuenta X
    3. creditamos a cuenta Y, pero antes de que esto ocurra la DB crashea, dependiendo del tipo de
      motor de DB que tengamos pueden ocurrir varios casos, uno de ellos es: se realizó el
      débito a la cuenta X, pero que no se haya hecho el crédito a la cuenta Y. Esto sería un
      resultado bastante inconsistente de la transaction.
    4. el motor de DB tiene que hacerse cargo de esta situación, ya que, en este caso, el error no
      fue causado por nosotros, no podemos manejarlo.

  Isolation:
    - puede mi transaction que está ocurriendo en este momento ver los cambios hechos por otra
      transaction? está mi transaction isolated de otras transactions que ocurran de manera
      concurrente?

    - read phenomena:
      a) dirty reads: cuando podemos data de una transaction a la que todavía no se le ha hecho
        commit.

        e.g: tenemos una tabla de ventas, donde cada venta tiene un product_id, un quantity de
        unidades vendidas y un price del precio del producto.

        si tenemos una transaction para realizar un reporte con respecto a esta tabla,
        que hará lo siguiente

        1. sacar el id y el price * quanitty de cada venta
        2. sacar una suma del price de las ventas

        todo parece estar bien, pero, qué pasaría si luego de ejecutar la primera query de esa
        transaction entra otra transaction de manera paralela? que por ejemplo, agregue una venta
        al producto con id 1. Los resultados entre la query 1 y la 2 van a ser inconsistentes, lo
        peor de todo es que a esa query que entró de manera paralela no se le ha hecho commit, así
        que es posible que a esos queries se les haga rollback.

      b) non-repeatable read: cuando en una transaction leemos un value y luego lo volvemos a leer,
        no nos referemos a hacer exactamente la misma consulta, si no a cuando en una consulta
        leemos un value en más de una ocasión. e.g: podemos en un select leer el value x, luego
        hacer una aggregate function con ese value x, pero para este punto ese value ya cambió. El
        valor de ese value no se puede repetir en la misma transaction.

        e.g: tenemos una tabla de ventas, donde cada venta tiene un product_id, un quantity de
        unidades vendidas y un price del precio del producto.

        si tenemos una transaction para realizar un reporte con respecto a esta tabla,
        que hará lo siguiente

        1. sacar el id y el price * quanitty de cada venta
        2. sacar una suma del price de las ventas

        qué pasaría si ejecutamos la primer query bien y antes de ejecutar la segunda query,
        entró otra transaction de manera paralela que modificó un registro de la tabla de ventas?
        vamos a obtener un resultado inconsistente porque la suma del precio de las ventas puede
        ser diferente a lo que obtuvimos en la primera query.

      c) phantom reads: cuando, por ejemplo, en el momento en que hacemos una query para leer una
        tabla, un registro se ingresa en esa tabla, la query no nos lo devuelve pero si hacemos la
        consulta de nuevo lo devolverá.

        e.g: tenemos una tabla de ventas, donde cada venta tiene un product_id, un quantity de
        unidades vendidas y un price del precio del producto.

        si tenemos una transaction para realizar un reporte con respecto a esta tabla,
        que hará lo siguiente

        1. sacar el id y el price * quanitty de cada venta
        2. sacar una suma del price de las ventas

        qué pasaría si ejecutamos la primer query bien y antes de ejecutar la segunda query, se
        entró otra transaction de manera paralela que inserta un registro nuevo en la tabla? para
        la segunda query de esta transaction vamos a leer un registro que no estaba antes, así que
        vamos a obtener un resultado inconsistente entre ambas consultas.

      d) lost updates: esto ocurre cuando escribimos algo, no le hemos hecho commit pero ya estamos
        tratando de leerlo. El problema está en que otras transactions pueden modificar esta query
        al que no le hemos hecho commit y vamos a buscar algo que antes estaba pero ahora no.

        e.g: tenemos una tabla de ventas, donde cada venta tiene un product_id, un quantity de
        unidades vendidas y un price del precio del producto.

        tenemos 2 transactions que se van a ejecutar de manera paralela y ambas comenzaron al mismo
        tiempo, la primera actualiza un registro de la tabla de sales (agrega 10 ventas para el
        producto 1) y posteriormente va a hacer una suma del precio de los productos, antes de esto,
        la otra transaction actualiza el mismo registro que la primera transaction y hace commit
        (agrega 5 ventas para el producto 1), por lo que sobrescribió los cambios del UPDATE de la
        primera transaction, al hacer la suma del precio de la primera transaction vamos a obtener
        un resultado inconsistente con lo que nos esperabamos porque vamos a hacer la suma con los
        cambios de la segunda transaction.

    - Isolation levels:

      podemos configurar el nivel de isolation que queremos utilizar en las propias consultas.

      el nivel por defecto para muchas DB es read commited.

      * read uncommited: no isolation, cualquier cambio de afuera es visible para la transaction,
        así esté commited o no.
      * read commited: cada query en una transaction solamente puede ver commited changes.
      * repeatable read: la transaction se va a asegurar que, sí y sólo si la query hace una
        lectura mantenga esa lectura intacta mientras acaba la transaction. Esto significa que
        mantendrá los resultados que ya obtuvo de esa lectura, pero si entra un nuevo registro a
        esa lectura que no estaba antes va a retornarlo también.
      * snapshot: cada query en una transaction solamente ve cambios que fueron realizados en esa
        transaction, es como tomar una snapshot toda la DB en este momento. Nos va a garantizar
        que solucionamos todos los read phenomena pero a un gran costo.
      * serializable: la más lenta de todas, este nivel de isolation significa abandonar por
        completo la concurrencia, el motor pasa a ejecutar una query y cuando esta acaba es cuando
        comienza con la siguiente.

    - Database implementation of Isolation
      * cada motor de DB puede implementar la Isolation de manera distinta.
      * Pessimistic - Row level locks (locker una columna de una tabla), table locks (por cada
        cambio que haga voy a lockear la tabla), page locks (clustering) to avoid lost updates.
      * Optimistic - No locks, se trackea si hubo algún cambio y si hubo alguno, se cancela la
        transaction y se ejecuta de nuevo.
      * Repeatable read "lockea" las columnas pero esto puede ser costoso si tiene que lockear
        demasiadas columnas. Postgres implementa RR como Snapshot, por esto con RR no tenemos
        phantom reads.
      * Serializable normalmente se implementa con Optimistic Concurrency Control, porque si de
        verdad se serializa toda una DB sería demasiado lento.

  Consistency:
    Son 2 tipos de consistencia que podemos tener de nuestra data reenforzada por la integridad
    referencial.

    - Consistency in Data:
      * Es algo que lo define el DBA o la persona que esté desarrollando el modelo de datos.
      * Integridad referencial (de foreign keys en SQL y de documentos en NoSQL, porque un 
        documento puede tener a otro, hacer referencia a otro). Integridad de las reglas que
        creamos en el modelo de datos.
      * Atomicity
      * Isolation

      e.g: si tenemos un registro que tiene una relación con otro registro que ya no existe, sería
      un estado incosistente de la DB.

    - Consistency in reads:
      * Si una transaction hace commit de un cambio debería una nueva transaction ver ese cambio
        automáticamente?
      * Es algo que afecta a un sistema en completo.
      * Se ve muy claro cuando tenemos una DB primary una de replica, porque la replica puede estar
        desincronizada con la DB primary y podemos tener una lectura de una tabla que no está 
        actualizada.
      * Afecta tanto a SQL como a no SQL.
      * Eventual consistency, en algún punto seremos consistentes. Hay que tomar esto con pinzas
        porque pueden haber situaciones de las cuales no podamos obtener consistenci (por ejemplo, 
        problemas de integridad refenrecial, sería complicado obtener consistency de esto).

  Durability:
    Es el proceso de persistir la data en un sistema no volátil.

    - Si mi sistema tiene un crash o se me va la luz pero realicé el commit, debería poder ver
      esa transaction persistida en el sistema.
    - Durability Techniques:
    
      1. WAL (Write Ahead Log) - son archivos que representan una versión de los cambios 
        realizados.

        * Escribir mucha información al disco es costoso (indexes, data, files).
        * Por esto se crearon unas versiones comprimidas de los cambios (WAL).

      2. Asynchronous Snapshot - todos los cambios se van guardando en memoria y luego son 
        persisitidos todos a la vez en la DB.
      3. AOF (Append Only Files) - muy similar al WAL, mantiene tracking de los cambios.

    - Cuando hacemos una escritura a la DB, el DBMS se comunica con el SO y le da la instrucción
    de escritura, por cómo funcionan los SO esta escritura puede almacenarse en el cache (los
    SO hacen escrituras por batches) así que le avisa de que la escritura terminó de manera
    correcta cuando puede no haberlo hecho. El problema es que no es información durable,
    en caso de que haya un crasheo del SO esta información puede perderse debido a la
    volatibilidad que tiene la memoria.

    Podemos forzar a que se escriba algo al disco sobrepasando el cache del sistema operativo
    con el comando Fsync pero esto es lento, tenemos que tener en cuenta los trade offs de una
    alternativa u otra.

    - Las DBs nos dan la opción de tener una strong durabiliy o de tener una eventual durability.
